---
import Layout from '../layouts/Layout.astro';
import CurrencyCard from '../components/CurrencyCard.astro';
import Background3D from '../components/Background3D';
import { exchangeRates, lastUpdated } from '../data/currencyData';

// Get INR rate from the data
const inrRate = exchangeRates.find(currency => currency.code === "INR")?.rate || 1;

// Convert all rates to INR
const adjustedRates = exchangeRates.map(currency => ({
  ...currency,
  rate: currency.rate / inrRate // Convert to INR rate
}));
---

<Layout title="All Currencies | Exchange Rates">
  <div class="background-container">
    <Background3D client:load />
  </div>

  <main>
    <section class="hero">
      <div class="hero-content">
        <h1 class="animated-title">All Currencies</h1>
        <p class="subtitle">Complete list of exchange rates against Indian Rupee (INR)</p>
        <a href="/" class="back-button">Back to Home</a>
      </div>
    </section>

    <section class="search-section">
      <div class="search-container">
        <input 
          type="text" 
          placeholder="Search currency by name or code..." 
          class="search-input" 
          id="searchInput"
        />
      </div>
    </section>

    <section class="currency-grid">
      {
        adjustedRates.map((currency) => (
          <CurrencyCard
            currency={currency.country}
            code={currency.code}
            value={currency.rate}
            lastUpdated={lastUpdated}
          />
        ))
      }
    </section>
  </main>
</Layout>

<style>
  .background-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
  }

  main {
    margin: auto;
    padding: 0;
    max-width: 1400px;
    position: relative;
    z-index: 1;
  }

  .hero {
    background: rgba(30, 41, 59, 0.8);
    backdrop-filter: blur(10px);
    color: white;
    padding: 3rem 2rem;
    margin-bottom: 2rem;
    text-align: center;
    border-radius: 0 0 30px 30px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .hero-content {
    max-width: 800px;
    margin: 0 auto;
  }

  .animated-title {
    font-size: 3rem;
    font-weight: 800;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #60a5fa, #a78bfa);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: titleAnimation 2s ease-out forwards;
  }

  .back-button {
    display: inline-block;
    margin-top: 1rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(45deg, #60a5fa, #a78bfa);
    color: white;
    border-radius: 9999px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .back-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(96, 165, 250, 0.3);
  }

  .subtitle {
    font-size: 1.25rem;
    color: #94a3b8;
    margin-bottom: 1rem;
  }

  .search-section {
    padding: 0 2rem;
    margin-bottom: 2rem;
  }

  .search-container {
    max-width: 600px;
    margin: 0 auto;
  }

  .search-input {
    width: 100%;
    padding: 1rem 1.5rem;
    border-radius: 9999px;
    border: 2px solid rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: #60a5fa;
    box-shadow: 0 0 20px rgba(96, 165, 250, 0.3);
    transform: scale(1.02);
  }

  .currency-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    padding: 2rem;
    margin-bottom: 3rem;
  }

  @media (max-width: 768px) {
    .animated-title {
      font-size: 2.5rem;
    }

    .currency-grid {
      grid-template-columns: 1fr;
      padding: 1rem;
    }
  }
</style>

<script>
  const searchInput = document.getElementById('searchInput');
  const currencyCards = document.querySelectorAll('.currency-card');

  searchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    
    currencyCards.forEach((card) => {
      const cardContent = card.textContent?.toLowerCase() || '';
      if (cardContent.includes(searchTerm)) {
        (card as HTMLElement).style.display = 'block';
      } else {
        (card as HTMLElement).style.display = 'none';
      }
    });
  });
</script>